1.spring容器的refresh() 创建刷新
        1.prepareRefresh();刷新前的预处理
            1.initPropertySources();初始化一些属性设置 子类定义个性化的属性设置方式
            2.getEnvironment().validateRequiredProperties();//检验属性合法行
            3.this.earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>();//保存容器中的一些早期事件
        2.ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();//获取BeanFactory
            1.refreshBeanFactory();//刷新BeanFactory
                    创建了一个beanFacotry:this.beanFactory = new DefaultListableBeanFactory();
                    设置id

            2.getBeanFactory:返回刚才GenericApplicationContext创建的BeanFactory对象

        3.prepareBeanFactory(beanFactory);//对BeanFactory做一些预处理的准备工作
            1.设置BeanFactory的类加载器,支持表达式解析器...
            2.添加部分BeanPostProcessor[ApplicationContextAwareProcessor]
            3.设置忽略的自动装配的接口:EnvironmentAware...
            4.注册可以解析的自动装配,让我们可以再组件中自动注入:
                BeanFactory,ResourceLoader,ApplicationEventPublisher,ApplicationContext
            5.添加后置处理器BeanPostProcessor:ApplicationListenerDetector
            6.添加编译时的AspectJ的支持
            7.给容器中注册一些能用的组件:environment,systemProperties,systemEnvironment

        4.postProcessBeanFactory(beanFactory);BeanFactory准备工作完成之后进行的后置处理工作
            子类通过重写这个方法来在BeanFactory创建并准备完成之后做进一步的设置
 =======================以上是BeanFacotry的创建以及预准工作==================================
        5.invokeBeanFactoryPostProcessors(beanFactory);执行BeanFactoryPostProcessor
        BeanFactoryPostProcessor:BeanFactory的后置处理器.在BeanFactory标准初始化之后执行的.
            两个接口:BeanFactoryPostProcessor,BeanDefinitionRegistryPostProcessor
            1.执行BeanFactoryPostProcessor.invokeBeanFactoryPostProcessors方法
                    1.获取所有的BeanDefinitionRegistryPostProcessor;
                    2.获取实现PriorityOrdered接口的BeanDefinitionRegistryPostProcessor 排序 然后执行
                    3.获取实现Ordered接口的BeanDefinitionRegistryPostProcessor 排序 然后执行
                    4.获取没有实现上面两个接口的BeanDefinitionRegistryPostProcessor 排序 然后执行
                    5.再执行BeanFactoryPostProcessor,流程同上


        6.registerBeanPostProcessors(beanFactory);注册Bean的后置处理器【Register bean processors that intercept bean creation.】注册Bean的后置处理器用于拦截Bean的创建
             不同接口类型的BeanPostProcessor:在Bean创建前后的执行时机是不一样的
             BeanPostProcessor
             DestructionAwareBeanPostProcessor,
             InstantiationAwareBeanPostProcessor,
             SmartInstantiationAwareBeanPostProcessor,
             MergedBeanDefinitionPostProcessor,

             1)获取所有的BeanPostProcessor;后置处理器都默认可以通过 PriorityOrdered  Ordered接口来指定优先级
             2) 先注册PriorityOrdered优先级接口的 BeanPostProcessor
                把每一个BeanPostProcessor 添加到BeanFactory中
                    private static void registerBeanPostProcessors(
                    			ConfigurableListableBeanFactory beanFactory, List<BeanPostProcessor> postProcessors) {

                    		for (BeanPostProcessor postProcessor : postProcessors) {
                    			beanFactory.addBeanPostProcessor(postProcessor);
                    		}
                    	}
            3)再注册Ordered接口的
            4)最后注册没有任何优先级接口的BeanPostProcessor
            5)最终注册MergedBeanDefinitionPostProcessor
            6)注册一个 ApplicationListenerDetector:在Bean创建完成后检查是否是ApplicationListener


        7.initMessageSource();初始化MessageSource组件(国际化 消息绑定 消息解析)
            1.获取BeanFactory
            2.判断容器中是否有id为messageSource的组件
                如果有则赋值给messageSource属性
                如果没有则创建一个DelegatingMessageSource,然后把创建好的MessageSource组件注册在容器中
                beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);
                messageSource:取出国际化文件中的某个key的值,能按照区域信息获取
            3.以后获取国际化配置哦文件的值的时候 可以自动注入MessageSource.

        8.initApplicationEventMulticaster();//初始化事件派发器
            1.获取BeanFactory
            2.从BeanFactory中获取id为applicationEventMulticaster的组件
            有则赋值给属性:this.applicationEventMulticaster =
                    					beanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.class);
            3.没有则创建:this.applicationEventMulticaster = new SimpleApplicationEventMulticaster(beanFactory);
            然后添加到beanFactory中,以后其他组件就可以自动注入



        9.onRefresh();留给子容器使用,子类重新这个方法 在容器刷新的时候自定义逻辑

        10.registerListeners(); 注入所有的监听器到容器中
            1)从容器中获取所有的ApplicationListener
            2)将每个监听器添加到applicationEventMulticaster
                    for (String listenerBeanName : listenerBeanNames) {
                    			getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);
                    		}
            3派发之前步骤产生的事件

        11.finishBeanFactoryInitialization(beanFactory);//初始化所有的剩下的单实例bean
            1.// Instantiate all remaining (non-lazy-init) singletons. 初始化所有剩下的单实例非懒加载的bean
              	beanFactory.preInstantiateSingletons();
              	1.获取容器中的所有Bean,依次进行初始化与创建对象
              	2.拿到bean的定义信息,RootBeanDefinition
              	3.!bd.isAbstract() && bd.isSingleton() && !bd.isLazyInit() bean不是抽象的 是单实例的  不是懒加载的
              	    1)判断是否是FactoryBean:是否实现了FactoryBean接口的Bean:
              	    2)不是工厂Bean 利用getBen(beanName);创建对象
              	        getBean(beanName);
              	            -->doGetBean
              	                -->Object sharedInstance = getSingleton(beanName);
              	                先从缓存中获取保存的单实例bean  如果能获取到则说明这个Bean之前被创建过(所有创建过的单实例bean都会被缓存起来)
              	                /** Cache of singleton objects: bean name --> bean instance */
                                	private final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(256);

                                缓存中获取不到,开始Bean的创建对象流程:
                                标记当前Bean已经被创建
                                获取Bean的定义信息
                                获取当前Bean依赖的其他Bean:如果有按照getBean 把依赖的Bean先创建出来
                                启动单实例bean的创建流程
                                  1.createBean(String beanName, RootBeanDefinition mbd, Object[] args)
                                  2.resolveBeforeInstantiation(beanName, mbdToUse);//让beanPostProcessor拦截返回代理对象
                                    InstantiationAwareBeanPostProcessor:提前执行
                                    先触发:postProcessBeforeInstantiation,如果有返回值,在触发postProcessAfterInitialization
                                  3.如果前面的InstantiationAwareBeanPostProcessor没有返回代理对象 则继续执行
                                  4.Object beanInstance = doCreateBean(beanName, mbdToUse, args);//创建
                                            1.【创建Bean实例】instanceWrapper = createBeanInstance(beanName, mbd, args);创建Bean实例
                                              利用工厂方法或者对象的构建器创建出Bean的实例
                                             2applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);
                                             protected void applyMergedBeanDefinitionPostProcessors(RootBeanDefinition mbd, Class<?> beanType, String beanName) {
                                             		for (BeanPostProcessor bp : getBeanPostProcessors()) {
                                             			if (bp instanceof MergedBeanDefinitionPostProcessor) {
                                             				MergedBeanDefinitionPostProcessor bdp = (MergedBeanDefinitionPostProcessor) bp;
                                             				bdp.postProcessMergedBeanDefinition(mbd, beanType, beanName);
                                             			}
                                             		}
                                             	}
                                            3.【Bean的属性赋值】populateBean(beanName, mbd, instanceWrapper);为Bean的属性赋值
                                                赋值之前：
                                                1.拿到InstantiationAwareBeanPostProcessor后置处理器执行postProcessAfterInstantiation()方法
                                                2.拿到InstantiationAwareBeanPostProcessor后置处理器执行postProcessPropertyValues()方法
                                                ==========================================================
                                                3.应用Bean属性的值,为属性利用Setter方法等进行赋值
                                                    applyPropertyValues(beanName, mbd, bw, pvs);

                                            4. 【Bean的初始化】initializeBean(beanName, exposedObject, mbd);
                                                    1.【执行xxxAware接口的方法】invokeAwareMethods(beanName, bean);
                                                        BeanNameAware/BeanClassLoaderAware/BeanFactoryAware
                                                    2.【执行后置处理器初始化之前】
                                                    BeanPostProcessor.postProcessBeforeInitialization()
                                                    applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName)
                                                    3.【执行初始化方法】invokeInitMethods(beanName, wrappedBean, mbd);执行初始化方法
                                                        1.是否实现了InitializingBeanBean接口的实现;执行接口规定的初始化
                                                        2.是否自定义初始化方法,如果有执行自定义初始化方法
                                                    4.【执行后置处理器初始化之后】 applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);
                                                         beanProcessor.postProcessAfterInitialization(result, beanName);
                                            5.【注册Bean的销毁方法】
                                            registerDisposableBeanIfNecessary(beanName, bean, mbd);
                                    5 将创建的Bean添加到单实例缓存中:singletonObjects

                                    IOC容器就是这些map,很多mao里面保存了单实例bean 环境信息...
                    查询所有的Bean是否是SmartInitializingSingleton接口的 如果是 就执行afterSingletonsInstantiated()
        12.finishRefresh();完成BeanFactory的初始化创建工作;IOC容器就完成创建;
                1.initLifecycleProcessor();初始化和生命周期相关的后置处理器:LifecycleProcessor
                        默认先从容器中找是否有lifecycleProcessor的组件,如果没有 new DefaultLifecycleProcessor
                        加入到容器中,供后续调用
                        1.写一个LifecycleProcessor的实现类 可以再beanFactory的onRefresh,onClose的时候进行调用
                2.getLifecycleProcessor().onRefresh();拿到生命周期处理器(监听beanFactory),回调onRefresh方法
                3.publishEvent(new ContextRefreshedEvent(this));发布容器刷新完成事件.
                4.LiveBeansView.registerApplicationContext(this);










