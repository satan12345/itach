1.spring容器的refresh() 创建刷新
        1.prepareRefresh();刷新前的预处理
            1.initPropertySources();初始化一些属性设置 子类定义个性化的属性设置方式
            2.getEnvironment().validateRequiredProperties();//检验属性合法行
            3.this.earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>();//保存容器中的一些早期事件
        2.ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();//获取BeanFactory
            1.refreshBeanFactory();//刷新BeanFactory
                    创建了一个beanFacotry:this.beanFactory = new DefaultListableBeanFactory();
                    设置id

            2.getBeanFactory:返回刚才GenericApplicationContext创建的BeanFactory对象

        3.prepareBeanFactory(beanFactory);//对BeanFactory做一些预处理的准备工作
            1.设置BeanFactory的类加载器,支持表达式解析器...
            2.添加部分BeanPostProcessor[ApplicationContextAwareProcessor]
            3.设置忽略的自动装配的接口:EnvironmentAware...
            4.注册可以解析的自动装配,让我们可以再组件中自动注入:
                BeanFactory,ResourceLoader,ApplicationEventPublisher,ApplicationContext
            5.添加后置处理器BeanPostProcessor:ApplicationListenerDetector
            6.添加编译时的AspectJ的支持
            7.给容器中注册一些能用的组件:environment,systemProperties,systemEnvironment

        4.postProcessBeanFactory(beanFactory);BeanFactory准备工作完成之后进行的后置处理工作
            子类通过重写这个方法来在BeanFactory创建并准备完成之后做进一步的设置
 =======================以上是BeanFacotry的创建以及预准工作==================================
        5.invokeBeanFactoryPostProcessors(beanFactory);执行BeanFactoryPostProcessor
        BeanFactoryPostProcessor:BeanFactory的后置处理器.在BeanFactory标准初始化之后执行的.
            两个接口:BeanFactoryPostProcessor,BeanDefinitionRegistryPostProcessor
            1.执行BeanFactoryPostProcessor.invokeBeanFactoryPostProcessors方法
                    1.获取所有的BeanDefinitionRegistryPostProcessor;
                    2.获取实现PriorityOrdered接口的BeanDefinitionRegistryPostProcessor 排序 然后执行
                    3.获取实现Ordered接口的BeanDefinitionRegistryPostProcessor 排序 然后执行
                    4.获取没有实现上面两个接口的BeanDefinitionRegistryPostProcessor 排序 然后执行
                    5.再执行BeanFactoryPostProcessor,流程同上


        6.registerBeanPostProcessors(beanFactory);注册Bean的后置处理器【Register bean processors that intercept bean creation.】注册Bean的后置处理器用于拦截Bean的创建
             不同接口类型的BeanPostProcessor:在Bean创建前后的执行时机是不一样的
             BeanPostProcessor
             DestructionAwareBeanPostProcessor,
             InstantiationAwareBeanPostProcessor,
             SmartInstantiationAwareBeanPostProcessor,
             MergedBeanDefinitionPostProcessor,

             1)获取所有的BeanPostProcessor;后置处理器都默认可以通过 PriorityOrdered  Ordered接口来指定优先级
             2) 先注册PriorityOrdered优先级接口的 BeanPostProcessor
                把每一个BeanPostProcessor 添加到BeanFactory中
                    private static void registerBeanPostProcessors(
                    			ConfigurableListableBeanFactory beanFactory, List<BeanPostProcessor> postProcessors) {

                    		for (BeanPostProcessor postProcessor : postProcessors) {
                    			beanFactory.addBeanPostProcessor(postProcessor);
                    		}
                    	}
            3)再注册Ordered接口的
            4)最后注册没有任何优先级接口的BeanPostProcessor
            5)最终注册MergedBeanDefinitionPostProcessor
            6)注册一个 ApplicationListenerDetector:在Bean创建完成后检查是否是ApplicationListener










