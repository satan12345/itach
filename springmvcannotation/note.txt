1 web容器在启动的时候会扫描每个jar包下的META-INF/services/javax.servlet.ServletContainerInitializer这个文件
2 加载这个文件指定的类：org.springframework.web.SpringServletContainerInitializer
3 Spring应用一启动就会加载感兴趣的WebApplicationInitializer接口下的所有的组件
4 并且为WebApplicationInitializer这些组件创建对象( 非接口 非抽象类)
        AbstractContextLoaderInitializer:
            创建根容器:createRootApplicationContext();

        AbstractDispatcherServletInitializer:
            创建一个webIOC容器:createServletApplicationContext();
            创建一个DispatcherServlet：createDispatcherServlet(servletAppContext);
            将创建的dispatcherServlet添加到servletContext中:
                    getServletMappings();

        AbstractAnnotationConfigDispatcherServletInitializer:注解方式配置的初始化器
            创建根容器:createRootApplicationContext();
                       getRootConfigClasses();传入配置类
            创建Web的IOC容器:createServletApplicationContext();
                        获取配置类:getServletConfigClasses();

总结：
    以注解的方式来启动SpringMVC,继承AbstractAnnotationConfigDispatcherServletInitializer,
    实现其中的抽象方法指定DispatcherServlet的配置信息:

========================================
定制springmvc
    1.@EnableWebMvc:开启springmvc定制功能:
        相当于<mvc:annotation-driven/>

    2.配置组件(视图解析器)